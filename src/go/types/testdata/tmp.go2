// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

/*
type I interface{
        m(type A)(A)
}
 
type S struct{}
 
func (S) m(type B)(B)
 
var _ I = S{}

type E(type T) interface {
        m(type B)(B)
}

type II interface{
        (E(int))
        mm() int
}

var _ I = II(nil)
*/

func _(type T interface{})(x T) {
        for range x /* ERROR cannot range */ {}
}

func _(type T interface{ type string, []string })(x T) {
        for range x {}
        for i := range x { _ = i }
        for i, _ := range x { _ = i }
        for i, e := range x /* ERROR cannot range */ { _ = i } // different element types
        for _, e := range x /* ERROR cannot range */ {} // different element types
        var e rune
        _ = e
        for _, (e) = range x /* ERROR cannot range */ {} // different element types
}


func _(type T interface{ type string, []rune, map[int]rune })(x T) {
        for _, e := range x { _ = e }
        for i, e := range x { _ = i; _ = e }
}

func _(type T interface{ type string, []rune, map[string]rune })(x T) {
        for _, e := range x { _ = e }
        for i, e := range x /* ERROR cannot range */ { _ = e } // different key types
}

func _(type T interface{ type string, chan int })(x T) {
        for range x {}
        for i := range x { _ = i }
        for i, _ := range x { _ = i }
}
