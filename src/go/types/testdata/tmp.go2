// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

func f(type P interface{ m() P })(x P)

type T(type P) P

func (_ T(P)) m() T(P)

func _(type Q)(x Q) {
	f(T(Q))(T(Q)(x))
}

// TODO(gri) Once the code above works, check the code below.
/*
type NumericAbs(type T) interface {
	Abs() T
}

func AbsDifference(type T NumericAbs(T))()

type OrderedAbs(type T) T

func (a OrderedAbs(T)) Abs() OrderedAbs(T)

func OrderedAbsDifference(type T)() {
	AbsDifference(OrderedAbs(T))()
}
*/

/*
package p

type T(type _ interface { a() }, _ interface{}) struct{}

type A(type P) struct{ x P }

func (_ A(P)) a() {}

var _ T(A(int), int)
*/

/*
type NumericAbs(type T) interface {
	Abs() T
}

func AbsDifference(type T NumericAbs(T))(x T)

type OrderedAbs(type T) T

func (a OrderedAbs(T)) Abs() T

func OrderedAbsDifference(type T)(x T) {
	AbsDifference(OrderedAbs(T)(x))
}
*/

// TODO(gri) Once the code above works, check the code below.
/*
type NumericAbs(type T) interface {
	Abs() T
}

func AbsDifference(type T NumericAbs(T))()

type OrderedAbs(type T) T

func (a OrderedAbs(T)) Abs() T

func OrderedAbsDifference(type T)() {
	AbsDifference(OrderedAbs(T))()
}
*/