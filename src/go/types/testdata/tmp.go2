// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package p

type T(type P) struct {}

func (_ T(P)) m1() T(P)

func (m T(P)) m2() {
	// TODO(gri) this should be valid
	var _ T(P) = m /* ERROR cannot use */ .m1()
}

/*
type Pair(type K) struct {
	key K
}

type Receiver(type T) struct {
	values T
}

type Iterator(type K) struct {
	r Receiver(Pair(K))
}

func (r Receiver(T)) Values() T {
	return r.values
}

func (it Iterator(K)) Next() K {
	//x := it.r.Values()
        // it         : Iterator(K)
        // it.r       : Receiver(Pair(K))
        // it.r.Values: Pair(K)
        //var r Receiver(Pair(K))
        var x Pair(K) //= (r.Values)()
	return x.key
}
*/