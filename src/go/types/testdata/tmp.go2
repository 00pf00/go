// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

type C(type T) interface {
	m()
}

type W(type T) interface {
	C(T)
}

func _(type T W(T))(x T) {
	// x.m() // TODO(gri) this doesn't work at the moment - embedding bug
}

/*
contract C(T) {
	T m()
}

contract W(T) {
	C(T)
}

func _(type T W)(x T) {
	x.m()
}
*/

/*
contract comparable(T) {
	T foo() bool
}

contract compareTwo(A, B) {
	comparable(A)
	//comparable(B)
}

func _(type T1, T2 compareTwo)(x1, y1 T1) bool {
	// return x1 == y1
	return x1.foo()
}

func _(type T comparable)(x, y T) bool {
	return x == y || x != y
}
*/